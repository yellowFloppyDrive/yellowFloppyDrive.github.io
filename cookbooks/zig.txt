################################################################################
Installation
################################################################################

--------------------------------------------------------------------------------
Installation
--------------------------------------------------------------------------------

brew install zig

--------------------------------------------------------------------------------
Initialize project
--------------------------------------------------------------------------------

# Initialize with package manager & tests
zig init

# Quick & dirty
mkdir app
cd app
touch main.zig

--------------------------------------------------------------------------------
Build, test and run project
--------------------------------------------------------------------------------

# For projects initialized with zig init
zig build test
zig build run

# For quick & dirty projects
zig run main.zig
zig test test.zig

--------------------------------------------------------------------------------
Hello world
--------------------------------------------------------------------------------

const std = @import("std");

pub fn main() void {
    std.debug.print("Hello, {s}!\n", .{"World"});
}

--------------------------------------------------------------------------------
Data types
--------------------------------------------------------------------------------

bool - true | false (no auto coercion)

Template for integer types
i<size> - signed integer - Two's complement
u<size> - unsigned integer - General byte type number or character

u2 - unsigned integer 2 bit
u8 - unsigned integer 8 bit
u16 - unsigned integer 16 bit
u32 - unsigned integer 32 bit
i8 - integer 8 bit
i32 - integer 32 bit

usize - unsigned integer of the pointer size
isize - integer of the pointer size

f32 - Float 32 bit
f128 - Float 128 bit float

?bool - Optional boolean (can be null)

--------------------------------------------------------------------------------
Pointers
--------------------------------------------------------------------------------

*u8 // Zig single element pointer
[*]u8 // Zig multi-element pointer (contains first element pointer and length)
[c*]u8 // C pointer

const expect = @import("std").testing.expect;

fn increment(num: *u8) void {
    num.* += 1;
}

test "pointers" {
    var x: u8 = 1;
    increment(&x);
    try expect(x == 2);
}

--------------------------------------------------------------------------------
Defers
--------------------------------------------------------------------------------

test "multi defer" {
    var x: f32 = 5;
    {
        defer x += 2;
        defer x /= 2;
    }
    try expect(x == 4.5);
}

--------------------------------------------------------------------------------
Figure out the pointer size on the machine
--------------------------------------------------------------------------------

const std = @import("std");

pub fn main() void {
    const x: usize = 16;
    std.debug.print("{d}", .{@sizeOf(@TypeOf(x))});
}

--------------------------------------------------------------------------------
Optionals
--------------------------------------------------------------------------------

// orelse operator
const a: ?f32 = null;
const fallback_value: f32 = 0;
const b = a orelse fallback_value;

// if unwrap
const maybe_num: ?usize = 10;
if (maybe_num) |n| {
    // Operate with n
} else {
    unreachable;
}

--------------------------------------------------------------------------------
Operators
--------------------------------------------------------------------------------

Algebraic: +, -, *, /, %, +=, -=, *=, /=, %=
Bitwise: <<, >>, &, |, ^, ~
Logical: and, or, !
Comparison: ==, !=, <, >, <=, >=
Pointer: p.*, &p
Errors: errorSetA || errorSetB
Optionals: orelse

--------------------------------------------------------------------------------
Arrays
--------------------------------------------------------------------------------

const array_with_5_u8 = [5]u8{ 'h', 'e', 'l', 'l', 'o' };
const array_with_5_u8_inferred = [_]u8{ 'w', 'o', 'r', 'l', 'd' };
const length = array.len;

--------------------------------------------------------------------------------
Slices
--------------------------------------------------------------------------------

const array = [_]u8{ 1, 2, 3, 4, 5 };
const slice = array[0..3];

// Under the hood
{
  firstElement: [*c]u8;
  len: usize;
}

--------------------------------------------------------------------------------
Structs
--------------------------------------------------------------------------------

const expect = @import("std").testing.expect;

const Stuff = struct {
    x: i32,
    y: i32,
    fn swap(self: *Stuff) void {
        const tmp = self.x;
        self.x = self.y;
        self.y = tmp;
    }
};

// Automatic dereferencing for sub-structs

test "automatic dereference" {
    const z: u8 = 3;
    var thing = Stuff{ .x = 10, .y = 20 };

    thing.swap();

    try expect(thing.x == 20);
    try expect(thing.y == 10);
    try expect(thing.z.* == 3);
}

--------------------------------------------------------------------------------
Enum
--------------------------------------------------------------------------------

const Direction = enum { north, south, east, west };

--------------------------------------------------------------------------------
Unions
--------------------------------------------------------------------------------

const expect = @import("std").testing.expect;

const Tag = enum { a, b, c };

const Tagged = union(Tag) { a: u8, b: f32, c: bool };

test "switch on tagged union" {
    var value = Tagged{ .b = 1.5 };
    switch (value) {
        .a => |*byte| byte.* += 1,
        .b => |*float| float.* *= 2,
        .c => |*b| b.* = !b.*,
    }
    try expect(value.b == 3);
}

--------------------------------------------------------------------------------
@Vector
--------------------------------------------------------------------------------

// SIMD - Single Instruction Multiple Data

const meta = @import("std").meta;

const x: @Vector(4, f32) = .{ 1, -10, 20, -1 };
const y: @Vector(4, f32) = .{ 2, 10, 0, 1 };
const z = x + y;
try expect(meta.eql(z, @Vector(4, f32){ 3, 0, 20, 0 }));

--------------------------------------------------------------------------------
Control flow
--------------------------------------------------------------------------------

// If - else if - else

if (true) {
    // then
} else if (false) {
    // then
} else {
    // then
}

// While loop

var x: u16 = if (true) 1 else 2;

while (i <= 3) : (i += 1) {
    if (i == 2) continue;
    if (i == 4) break;
    sum += i;
}

// For loop

const string = [_]u8{ 'a', 'b', 'c' };

for (string, 0..) |character, index| {
    if (i == 2) continue;
    if (i == 4) break;

    _ = character;
    _ = index;
}

// For loop labels

var count: usize = 0;
outer: for ([_]i32{ 1, 2, 3, 4, 5, 6, 7, 8 }) |_| {
    for ([_]i32{ 1, 2, 3, 4, 5 }) |_| {
        count += 1;
        continue :outer;
    }
}

// Multi-array iteration

const string = [_]u8{ 'a', 'b', 'c' };
const indices = [_]i8{ 0, 1, 2 };
const names = [_]u8{ 'd', 'e', 'f' };

for (string, indices, names) |character, i, name| {
    if (i == 2) continue;
    if (i == 4) break;

    std.debug.print("character {d} {c} {c}\n", .{ i, character, name });
}

for (string) |character| {
    _ = character;
}

for (string, 0..) |_, index| {
    _ = index;
}

for (string) |_| {}

// Switch

var x: i8 = 10;
switch (x) {
    -1...1 => {
        x = -x;
    },
    10, 100 => {
        //special considerations must be made
        //when dividing signed integers
        x = @divExact(x, 10);
    },
    else => {},
}

x = switch (x) {
    -1...1 => -x,
    10, 100 => @divExact(x, 10),
    else => x,
};

--------------------------------------------------------------------------------
Functions
--------------------------------------------------------------------------------

fn addFive(x: u32) u32 {
    return x + 5;
}

// Labeled blocks (anonymous functions)
const count = blk: {
    var sum: u32 = 0;
    var i: u32 = 0;
    while (i < 10) : (i += 1) sum += i;
    break :blk sum;
};
// count is 45

// Expression loop (incline reduce)
var i = begin;
return while (i < end) : (i += 1) {
    if (i == number) {
        break true;
    }
} else false;

// Functions evaluated at comptime
fn asBody(comptime print: fn (str: []const u8) void) void {
    print("hello from function body");
}

// Function pointers - dynamic function references
fn asPointer(print: *const fn (str: []const u8) void) void {
    print("hello from function pointer");
}

--------------------------------------------------------------------------------
Error handling
--------------------------------------------------------------------------------

// Error sets & combining error sets

const FileError = error{NotFound, PermissionDenied};
const NetworkError = error{Timeout, ConnectionRefused};

const CombinedError = FileError || NetworkError;

fn mayFail() CombinedError!void {
    // Can return errors from both sets
}

// Try and catch

const expect = @import("std").testing.expect;

fn divide(a: f32, b: f32) !f32 {
    if (b == 0) {
        return error.DivisionByZero;
    }
    return a / b;
}

fn failingFunction() error{Oops}!void {
    return error.Oops;
}

fn failFn() error{Oops}!i32 {
    try failingFunction();
    return 12;
}

test "try" {
    const ret = failFn();

    const v = ret catch |err| {
        try expect(err == error.Oops);
        return;
    };

    try expect(v == 12); // is never reached
}

// If else catch

const ent_num: error{UnknownEntity}!u32 = 5;
if (ent_num) |entity| {
    try expect(@TypeOf(entity) == u32);
    try expect(entity == 5);
} else |err| {
    _ = err catch {};
    unreachable;
}

// while catch

while (optionalValue()) |non_null| {
    // The while loop
}

// try-catch-switch

callFunction() catch |err| switch (err) { error.Name => 'a' };

--------------------------------------------------------------------------------
Test
--------------------------------------------------------------------------------

const std = @import("std");
const expect = std.testing.expect;

test "always fails" {
    try expect(false);
}

--------------------------------------------------------------------------------
Packaging
--------------------------------------------------------------------------------

const std = @import("std");
const PRINT_FAIL = @import("PRINT_FAIL.zig").PRINT_FAIL;

The built-in function @import takes in a file, and gives you a struct type
based on that file. All declarations labelled as pub (for public) will end up in
this struct type, ready for use.
