################################################################################
webgl.txt
################################################################################

--------------------------------------------------------------------------------
Graphics pipeline
--------------------------------------------------------------------------------

- Create vertex data (vertex, colors, textures, normals, etc) in native language
- Use the WebGL API to setup GPU state and to buffer the data into VRAM.
- Vertex shaders are used to transform (translate, rotate, scale) positions.
- Primitive assembly is used to generate geometry (points, lines, triangles)
  based on the draw mode.
- Rasterization converts primitives to fragments by finding which pixels occupy
  the fragment.
- Fragment shaders calculate the fragment colors.
- Fragment operations do depth, stencil and scissor testing.
- The frame buffer contains the output image.

--------------------------------------------------------------------------------
Bootstrap WebGL app
--------------------------------------------------------------------------------

function app() {
  const canvas = document.createElement("canvas");
  canvas.width = 512;
  canvas.height = 512;

  document.body.appendChild(canvas);

  const gl = canvas.getContext("webgl2");

  if (!gl) {
    throw "WebGL 2.0 is not supported";
  }
}

--------------------------------------------------------------------------------
Vertices
--------------------------------------------------------------------------------

- Winding order
    This is the order in which triangle vertices are ordered.
    The winding order determines the triangle facing direction.
    WebGL requires CCW (counter clockwise) winding order.

--------------------------------------------------------------------------------
Math
--------------------------------------------------------------------------------

type Vector3 = [number, number, number];

// Column major
type Matrix4x4 = [
  number, number, number, number,
  number, number, number, number,
  number, number, number, number,
  number, number, number, number
];

function rotationX(angle: number): Matrix4x4 {
  const cos: number = Math.cos(angle);
  const sin: number = Math.sin(angle);

  return [
    1.0,  0.0, 0.0, 0.0,
    0.0,  cos, sin, 0.0,
    0.0, -sin, cos, 0.0,
    0.0,  0.0, 0.0, 1.0
  ];
}

function rotationY(angle: number): Matrix4x4 {
  const cos = Math.cos(angle);
  const sin = Math.sin(angle);
  return [
    cos, 0.0, -sin, 0.0,
    0.0, 1.0,  0.0, 0.0,
    sin, 0.0,  cos, 0.0,
    0.0, 0.0,  0.0, 1.0
  ];
}

function rotationZ(angle: number): Matrix4x4 {
  const cos: number = Math.cos(angle);
  const sin: number = Math.sin(angle);
  return [
    cos, sin, 0.0, 0.0,
   -sin, cos, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
  ];
}

function multiplyMatrix4x4Vector3(m: Matrix4x4, v: Vector3): Vector3 {
  return [
    m[0]*v[0] + m[4]*v[1] + m[ 8]*v[2] + m[12],
    m[1]*v[0] + m[5]*v[1] + m[ 9]*v[2] + m[13],
    m[2]*v[0] + m[6]*v[1] + m[10]*v[2] + m[14]
  ];
}

function multiplyMatrix4x4Matrix4x4(a: Matrix4x4, b: Matrix4x4): Matrix4x4 {
  return [
    a[0]*b[0] + a[4]*b[1] + a[ 8]*b[2] + a[12]*b[3],
    a[1]*b[0] + a[5]*b[1] + a[ 9]*b[2] + a[13]*b[3],
    a[2]*b[0] + a[6]*b[1] + a[10]*b[2] + a[14]*b[3],
    a[3]*b[0] + a[7]*b[1] + a[11]*b[2] + a[15]*b[3],

    a[0]*b[4] + a[4]*b[5] + a[ 8]*b[6] + a[12]*b[7],
    a[1]*b[4] + a[5]*b[5] + a[ 9]*b[6] + a[13]*b[7],
    a[2]*b[4] + a[6]*b[5] + a[10]*b[6] + a[14]*b[7],
    a[3]*b[4] + a[7]*b[5] + a[11]*b[6] + a[15]*b[7],

    a[0]*b[8] + a[4]*b[9] + a[ 8]*b[10] + a[12]*b[11],
    a[1]*b[8] + a[5]*b[9] + a[ 9]*b[10] + a[13]*b[11],
    a[2]*b[8] + a[6]*b[9] + a[10]*b[10] + a[14]*b[11],
    a[3]*b[8] + a[7]*b[9] + a[11]*b[10] + a[15]*b[11],

    a[0]*b[12] + a[4]*b[13] + a[ 8]*b[14] + a[12]*b[15],
    a[1]*b[12] + a[5]*b[13] + a[ 9]*b[14] + a[13]*b[15],
    a[2]*b[12] + a[6]*b[13] + a[10]*b[14] + a[14]*b[15],
    a[3]*b[12] + a[7]*b[13] + a[11]*b[14] + a[15]*b[15]
  ];
}

--------------------------------------------------------------------------------
OBJ file format
--------------------------------------------------------------------------------

OBJ saves 3D models in the following format
Vertex - v x y z
Normal - vn x y z
Texture coordinates - vt x y
Face - f vi/vni/vti vi/vni/vti vi/vni/vti
Comments - # Comment

Single triangle example OBJ content:
  # A simple 3D triangle

  # List of vertex coordinates
  v 0.000000 0.000000 0.000000
  v 1.000000 0.000000 0.000000
  v 0.000000 1.000000 0.000000

  # List of texture coordinates
  vt 0.000000 0.000000
  vt 1.000000 0.000000
  vt 0.000000 1.000000

  # List of vertex normals
  vn 0.000000 0.000000 1.000000

  # Face definitions (using vertices, texture coordinates, and normals)
  f 1/1/1 2/2/1 3/3/1

--------------------------------------------------------------------------------
Copy data from RAM into VRAM - Data Buffers
--------------------------------------------------------------------------------

// Define data
const vertices = [0.0, 0.0];

// Pointer to a block of VRAM
const vertexBuffer = gl.createBuffer();

// Set the ARRAY_BUFFER to point to where vertexBuffer points to
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);

// Copy data from RAM to VRAM
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

--------------------------------------------------------------------------------
Shader programs
--------------------------------------------------------------------------------

/*
 * Vertex shader
 */

const vertexShaderSource = `
  attribute vec2 a_position;

  void main() {
    gl_Position = vec4(a_position, 0.0, 1.0);
    gl_PointSize = 10.0;
  }
`;

const vertexShader = gl.createShader(gl.VERTEX_SHADER);

if (!vertexShader) {
  throw "Could not create vertex shader!";
}

gl.shaderSource(vertexShader, vertexShaderSource);
gl.compileShader(vertexShader);

/*
 * Fragment shader
 */

const fragmentShaderSource = `
  precision mediump float;

  void main() {
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
  }
`;

const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

if (!fragmentShader) {
  throw "Could not create fragment shader!";
}

gl.shaderSource(fragmentShader, fragmentShaderSource);
gl.compileShader(fragmentShader);

/*
 * The pipeline program
 */

const program = gl.createProgram();

if (!program) {
  throw "Could not create the program!";
}

gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);

gl.linkProgram(program);

gl.useProgram(program);

/*
 * Program attribute definition
 */

const a_position = gl.getAttribLocation(program, "a_position");
gl.enableVertexAttribArray(a_position);
gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);

// a_position is a defined as
//   A vertex of 2 components.
//   Component type is FLOAT.
//   Vertex normalization is false.
//   0 stride / 0 skipped elements between 2 vertices.
//   0 offset from the start.


/*
 * Showing shader compilation errors
 */

const status = gl.getShaderStatus(vertexShader, gl.COMPILE_STATUS);

if (!status) {
  const log = gl.getShaderInfoLog(vertexShader);
  console.error(log);
}

--------------------------------------------------------------------------------
Render - Draw call
--------------------------------------------------------------------------------

gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.drawArrays(gl.POINTS, 0, 1);

gl.bindBuffer(gl.ELEMENT_BUFFER, elementBuffer);
gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, 0);

--------------------------------------------------------------------------------
Graphics pseudocode
--------------------------------------------------------------------------------

- Configure a canvas.
- Get the webgl2 context from the canvas.
- Create a vertex buffer with vertex data.
- Create and compile a vertex shader with attributes (e.g. a_position) and
  outputs (e.g. gl_Position, gl_PointSize).
- Create and compile a fragment shader that calculates the pixel colors
  (gl_FragColor).
- Create, link and use a program with the vertex and fragment shader.
- Set the clear color.
- Clear the color buffer bit.
- Draw the image with a draw call.

--------------------------------------------------------------------------------
Render a point
--------------------------------------------------------------------------------

const canvas = document.createElement("canvas");
canvas.width = 512;
canvas.height = 512;

document.body.appendChild(canvas);

const gl = canvas.getContext("webgl2");

if (!gl) {
  throw "WebGL2 is not supported!";
}

const vertices = [0.0, 0.0];
const vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

const vertexShaderSource = `
  attribute vec2 a_position;

  void main() {
    gl_Position = vec4(a_position, 0.0, 1.0);
    gl_PointSize = 10.0;
  }
`;

const vertexShader = gl.createShader(gl.VERTEX_SHADER);

if (!vertexShader) {
  throw "Could not create vertex shader!";
}

gl.shaderSource(vertexShader, vertexShaderSource);
gl.compileShader(vertexShader);

const fragmentShaderSource = `
  precision mediump float;

  void main() {
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
  }
`;

const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

if (!fragmentShader) {
  throw "Could not create fragment shader!";
}

gl.shaderSource(fragmentShader, fragmentShaderSource);
gl.compileShader(fragmentShader);

const program = gl.createProgram();

if (!program) {
  throw "Could not create the program!";
}

gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);

gl.linkProgram(program);

gl.useProgram(program);

gl.clearColor(0.0, 0.0, 0.0, 1.0);
gl.clear(gl.COLOR_BUFFER_BIT);

gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.drawArrays(gl.POINTS, 0, vertices.length / 2);
